# -*- coding: utf-8 -*-
"""python_task1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BqZaVsut2Mmj9rfU4fjxNWm_KWIKHCWN
"""

import pandas as pd

def generate_car_matrix(data):
    df_pivot = data.pivot(index='id_1', columns='id_2', values='car')
    diagonal_values = df_pivot.values.diagonal()
    df_pivot.values[[range(len(diagonal_values))]*2] = 0

    return df_pivot
data = pd.read_csv('dataset-1.csv')
result_matrix = generate_car_matrix(data)

data

result_matrix

#Q2

def get_type_count(data):
    data['car_type'] = pd.cut(data['car'],
                              bins=[float('-inf'), 15, 25, float('inf')],
                              labels=['low', 'medium', 'high'],
                              right=False)
    type_count = data['car_type'].value_counts().to_dict()
    type_count = dict(sorted(type_count.items()))
    return type_count

data = pd.read_csv('dataset-1.csv')
result = get_type_count(data)
print(result)

#Q3
def get_bus_indexes(data):
    bus_mean = data['bus'].mean()
    bus_indexes = data[data['bus'] > 2 * bus_mean].index.tolist()
    bus_indexes.sort()
    return bus_indexes
data = pd.read_csv('dataset-1.csv')
result = get_bus_indexes(data)
print(result)

#Q4

def filter_routes(data):
    route_avg_truck = data.groupby('route')['truck'].mean()
    filtered_routes = route_avg_truck[route_avg_truck > 7].index.tolist()
    filtered_routes.sort()
    return filtered_routes
data = pd.read_csv('dataset-1.csv')
result = filter_routes(data)
print(result)

#Q5

def multiply_matrix(df):
    modified_df = df.copy()
    modified_df[modified_df > 20] *= 0.75
    modified_df[(modified_df <= 20) & (modified_df >= 0)] *= 1.25
    modified_df = modified_df.round(1)

    return modified_df

modified_result = multiply_matrix(result_matrix)

print(modified_result)

#Q6

def check_timestamp_completeness(data):
    data['start_timestamp'] = pd.to_datetime(data['startDay'] + ' ' + data['startTime'])
    data['end_timestamp'] = pd.to_datetime(data['endDay'] + ' ' + data['endTime'])
    data['duration'] = data['end_timestamp'] - data['start_timestamp']
    completeness_check = data.groupby(['id', 'id_2']).apply(
        lambda x: (
            (x['duration'].min() >= pd.Timedelta(days=7)) and
            (x['duration'].max() <= pd.Timedelta(days=7, seconds=86399))
        )
    )

    return completeness_check
data = pd.read_csv('dataset-2.csv')
result = check_timestamp_completeness(data)
print(result)

