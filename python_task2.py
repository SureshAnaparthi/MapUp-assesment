# -*- coding: utf-8 -*-
"""python_task2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K5rg8S8DFaBRKsAu5wt8A--LHl-RBlWZ
"""

import pandas as pd

def calculate_distance_matrix(data):
    toll_locations = pd.concat([data['start_toll'], data['end_toll']]).unique()
    distance_matrix = pd.DataFrame(index=toll_locations, columns=toll_locations)
    distance_matrix = distance_matrix.fillna(0)
    for index, row in data.iterrows():
        start = row['start_toll']
        end = row['end_toll']
        distance = row['distance']
        distance_matrix.loc[start, end] = distance
        distance_matrix.loc[end, start] = distance
    for via in toll_locations:
        for start in toll_locations:
            for end in toll_locations:
                if distance_matrix.loc[start, via] != 0 and distance_matrix.loc[via, end] != 0:
                    if distance_matrix.loc[start, end] == 0 or \
                       distance_matrix.loc[start, via] + distance_matrix.loc[via, end] < distance_matrix.loc[start, end]:
                        distance_matrix.loc[start, end] = distance_matrix.loc[start, via] + distance_matrix.loc[via, end]
        distance_matrix.values[[range(len(toll_locations))]*2] = 0

    return distance_matrix

data = pd.read_csv('dataset-3.csv')

result_distance_matrix = calculate_distance_matrix(data)
print(result_distance_matrix)

#Q2
def unroll_distance_matrix(distance_matrix):
    labels = distance_matrix.index.tolist()
    unrolled_distances = pd.DataFrame(columns=['id_start', 'id_end', 'distance'])
    for i, start_label in enumerate(labels):
        for j, end_label in enumerate(labels):
            if i != j:
                distance = distance_matrix.iloc[i, j]
                unrolled_distances = unrolled_distances.append({'id_start': start_label, 'id_end': end_label, 'distance': distance}, ignore_index=True)

    return unrolled_distances

distance_matrix = pd.DataFrame({
    'A': [0, 10, 20],
    'B': [10, 0, 30],
    'C': [20, 30, 0]
}, index=['A', 'B', 'C'])
result_unrolled_distances = unroll_distance_matrix(distance_matrix)
print(result_unrolled_distances)

#Q3
import pandas as pd

def find_ids_within_ten_percentage_threshold(data, reference_value):
    reference_avg_distance = data[data['id_start'] == reference_value]['distance'].mean()
    threshold = reference_avg_distance * 0.1
    within_threshold = data[(data['id_start'] != reference_value) &
                            (data['distance'] >= reference_avg_distance - threshold) &
                            (data['distance'] <= reference_avg_distance + threshold)]

    sorted_ids_within_threshold = sorted(within_threshold['id_start'].unique())
    return sorted_ids_within_threshold

reference_id = 'A'
result_ids_within_threshold = find_ids_within_ten_percentage_threshold(result_unrolled_distances, reference_id)
print(result_ids_within_threshold)

#Q4

def calculate_toll_rate(data):
    data['moto'] = data['distance'] * 0.8
    data['car'] = data['distance'] * 1.2
    data['rv'] = data['distance'] * 1.5
    data['bus'] = data['distance'] * 2.2
    data['truck'] = data['distance'] * 3.6

    return data


result_with_toll_rates = calculate_toll_rate(result_unrolled_distances)
print(result_with_toll_rates)

import pandas as pd
from datetime import time

def calculate_time_based_toll_rates(data):
    weekday_morning = (time(0, 0, 0), time(10, 0, 0))
    weekday_afternoon = (time(10, 0, 0), time(18, 0, 0))
    weekday_evening = (time(18, 0, 0), time(23, 59, 59))
    day_names = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']

    discount_factors_weekday = {
        weekday_morning: 0.8,
        weekday_afternoon: 1.2,
        weekday_evening: 0.8
    }
    discount_factor_weekend = 0.7
    data['start_time'] = pd.to_datetime(data['start_time'])
    data['end_time'] = pd.to_datetime(data['end_time'])
    data['start_day'] = data['start_time'].dt.day_name()
    data['end_day'] = data['end_time'].dt.day_name()
    for index, row in data.iterrows():
        start_time = row['start_time'].time()
        end_time = row['end_time'].time()
        start_day = row['start_day']
        end_day = row['end_day']

        if start_day in day_names and end_day in day_names:
            for interval, discount in discount_factors_weekday.items():
                if interval[0] <= start_time <= interval[1] and interval[0] <= end_time <= interval[1]:
                    data.loc[index, ['moto', 'car', 'rv', 'bus', 'truck']] *= discount

            if start_day in ['Saturday', 'Sunday'] or end_day in ['Saturday', 'Sunday']:
                data.loc[index, ['moto', 'car', 'rv', 'bus', 'truck']] *= discount_factor_weekend

    return data


result_with_time_based_toll_rates = calculate_time_based_toll_rates(result_ids_within_threshold)
print(result_with_time_based_toll_rates)

